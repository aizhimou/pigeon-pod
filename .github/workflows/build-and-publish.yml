name: Build and Publish Docker Image to GHCR

# 触发工作流的事件
on:
  push:
    paths-ignore: # 忽略对这些文件的更改，不触发工作流
      - README.md
      - README-ZH.md
      - LICENSE
      - docker-compose.yml
      - documents/**
    branches:
      - release  # 当有代码推送到 release 分支时触发
      - main  # 当有代码推送到 main 分支时触发
  workflow_dispatch: # 允许手动在 Actions 页面触发此工作流
  pull_request:
    paths-ignore: # 忽略对这些文件的更改，不触发工作流
      - README.md
      - LICENSE
      - docker-compose.yml
      - documents/**

# 环境变量，方便统一管理
env:
  REGISTRY: ghcr.io  # GitHub Container Registry 的地址
  IMAGE_NAME: ${{ github.repository }} # 镜像名称，格式为 "用户名/仓库名"

jobs:
  build-and-push-image:
    # 运行此 job 的虚拟机环境，ubuntu-latest x86_64
    runs-on: ubuntu-latest

    # 授予 job 推送 Docker 镜像到 GHCR 的权限
    permissions:
      contents: read       # 读取仓库内容的权限
      packages: write      # 写入(推送) package (Docker镜像) 的权限

    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 从 pom.xml 提取版本信息
      - name: Extract version from pom.xml
        id: extract-version
        run: |
          VERSION=$(grep -A 1 '<artifactId>pigeon-pod</artifactId>' backend/pom.xml | grep '<version>' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      # 步骤 3: 获取分支名称
      - name: Extract branch name
        id: extract-branch
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Branch name: $BRANCH_NAME"

      # 步骤 4: 生成自定义标签
      - name: Generate custom tag
        id: generate-tag
        run: |
          CUSTOM_TAG="${{ steps.extract-branch.outputs.branch }}-${{ steps.extract-version.outputs.version }}"
          echo "tag=$CUSTOM_TAG" >> $GITHUB_OUTPUT
          echo "Generated tag: $CUSTOM_TAG"

      # 步骤 4.5: 生成标签列表（包含 latest）
      - name: Generate tags
        id: generate-tags
        run: |
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.generate-tag.outputs.tag }}"
          
          # 如果是 release 分支且不是 PR，添加 latest 标签
          if [ "${{ steps.extract-branch.outputs.branch }}" == "release" ] && [ "${{ github.event_name }}" != "pull_request" ]; then
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          fi
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Generated tags: $TAGS"

      # 步骤 5: 登录到 GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 6: 构建并推送 Docker 镜像
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.generate-tags.outputs.tags }}
          platforms: linux/amd64,linux/arm64
